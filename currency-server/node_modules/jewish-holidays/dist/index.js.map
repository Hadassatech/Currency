{"version":3,"sources":["../src/index.ts","../src/holiday/holiday.ts","../src/shabbat/shabbat.ts","../src/jewishDateUtils/jewishDateUtils.ts","../src/yomTov/yomTov.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module jewish-holidays\n */\n\n/**\n * A simple npm package to check Jewish holidays and Shabbat.\n *\n * ## Installation\n *\n * ```bash\n * npm install jewish-holidays\n * ```\n *\n * ## Usage\n *\n * ```javascript\n * import { isYomTov, isShabbat } from 'jewish-holidays';\n *\n * // Check if a date is Yom Tov\n * const date = new Date();\n * const isInChutzLaaretz = true; // Adjust as needed\n * console.log(isYomTov(date, isInChutzLaaretz)); // true or false\n *\n * // Check if a date is Shabbat\n * console.log(isShabbat(date)); // true or false\n * ```\n *\n * ## Functions\n *\n * ### `isYomTov(date: Date | BasicJewishDate, isChutzLaaretz: boolean) => boolean`\n *\n * Determines if the given date is a Yom Tov (Jewish holiday).\n *\n * - `date`: A JavaScript Date object or a BasicJewishDate object.\n * - `isChutzLaaretz`: A boolean indicating if the calculation should consider diaspora holidays.\n *\n * - `boolean`: `true` if the date is a Yom Tov, `false` otherwise.\n *\n * ### `isShabbat(date: Date | BasicJewishDate) => boolean`\n *\n * Determines if the given date is Shabbat.\n *\n * - `date`: A JavaScript Date object or a BasicJewishDate object.\n *\n * - `boolean`: `true` if the date is Shabbat, `false` otherwise.\n *\n * ## License\n *\n * This package is licensed under the MIT License. See the `LICENSE` file for more details.\n */\n\n\nexport * from './holiday';\nexport * from './shabbat';\nexport * from './yomTov';\nexport * from './interfaces';\n\n\n","// Copyright (c) Shmulik kravitz. All rights reserved. Licensed under the MIT license.\n\nimport { toJewishDate, type BasicJewishDate } from 'jewish-date';\nimport { Holiday } from '../interfaces';\n\n/**\n * Return if the date exists in holyday list\n * @public\n */\nexport const isHoliday = (jewishDate: BasicJewishDate, holidayList: Holiday[]): boolean => {\n    // if jewishDate is not defined use today\n    if (!jewishDate) {\n        const date = new Date();\n        jewishDate = toJewishDate(date);\n    }\n    return holidayList.some(i => i.day == jewishDate.day && i.monthName == jewishDate.monthName);\n};","import { BasicJewishDate, toGregorianDate } from \"jewish-date\";\nimport { isBasicJewishDate } from \"../jewishDateUtils\";\n\n/**\n * Checks if a given date is Shabbat (the Jewish Sabbath).\n *\n * @param date - The date to check, which can be a JavaScript `Date` object\n *               or a `BasicJewishDate` object.\n * \n * @returns A boolean indicating whether the provided date falls on Shabbat.\n *\n * @remarks\n * Shabbat begins at sundown on Friday and ends at nightfall on Saturday.\n * In the Gregorian calendar, Shabbat corresponds to Saturday, which is\n * represented by `getDay() === 6`.\n * \n * @example\n * // Example: Check if a specific date is Shabbat\n * const date = new Date('2023-10-21'); // Saturday\n * const result = isShabbat(date); // true\n *\n * @public\n */\n\nexport const isShabbat = (date: Date | BasicJewishDate): boolean => {\n    let gregorianDate: Date;\n    if (isBasicJewishDate(date)) {\n        gregorianDate = toGregorianDate(date);\n    } else {\n        gregorianDate = date;\n    }\n    return gregorianDate.getDay() === 6;\n}","import { BasicJewishDate } from \"jewish-date\";\n\nexport const isBasicJewishDate = (object: Date | BasicJewishDate): object is BasicJewishDate => {\n    return \"monthName\" in object;\n};\n","// Copyright (c) Shmulik kravitz. All rights reserved. Licensed under the MIT license.\n\nimport { BasicJewishDate, toJewishDate } from \"jewish-date\";\nimport type { Holiday } from \"../interfaces\";\nimport { isHoliday } from \"../holiday\";\nimport { isBasicJewishDate } from \"../jewishDateUtils/jewishDateUtils\";\n\nconst getYomTovListIsrael = (): Holiday[] => {\n    const result: Holiday[] = [\n        { day: 1, monthName: \"Tishri\", name: 'Rosh Hashanah' },\n        { day: 2, monthName: \"Tishri\", name: 'Rosh Hashanah' },\n        { day: 10, monthName: \"Tishri\", name: 'Yom Kippur' },\n        { day: 15, monthName: \"Tishri\", name: 'Sukkot' },\n        { day: 22, monthName: \"Tishri\", name: 'Simchat Torah' },\n\n        { day: 15, monthName: \"Nisan\", name: 'Pesach' },\n        { day: 21, monthName: \"Nisan\", name: 'Shevii Shel Pesach' },\n\n        { day: 6, monthName: \"Sivan\", name: 'Shavuot' },\n\n    ];\n    return result;\n};\n\nconst getYomTovListChutzLaaretzOnly = (): Holiday[] => {\n    const result: Holiday[] = [\n        { day: 16, monthName: \"Tishri\", name: 'Sukkot' },\n        { day: 23, monthName: \"Tishri\", name: 'Simchat Torah' },\n\n        { day: 16, monthName: \"Nisan\", name: 'Pesach' },\n        { day: 22, monthName: \"Nisan\", name: 'Pesach Shel Pesach' },\n\n        { day: 7, monthName: \"Sivan\", name: 'Shavuot' },\n    ];\n    return result;\n};\n\n/**\n * Determines if a given date is a Yom Tov (Jewish holiday).\n *\n * This function accepts either a Gregorian date or a BasicJewishDate object\n * and checks if it corresponds to a Yom Tov in either Israel or Chutz Laaretz (the diaspora).\n *\n * @param  date - The date to check, which can be either:\n *   - A Gregorian date object, or\n *   - An object representing a Jewish date with properties `day`, `monthName`, and `year`.\n * @param isChutzLaaretz - A boolean indicating whether to check against Yom Tov dates\n *   observed in Chutz Laaretz. Defaults to `false`, meaning it checks only for Israeli holidays.\n *\n * @returns  Returns `true` if the given date is a Yom Tov, \n *   and `false` otherwise.\n *\n * @example\n * const isRoshHashanah = isYomTov(new Date(2024, 9, 3)); // true\n * const isSukkotInChutzLaaretz = isYomTov(\\{ day: 16, monthName: \"Tishri\", year: 5785 \\}, true); // true\n * \n * @public\n */\nexport const isYomTov = (date: Date | BasicJewishDate, isChutzLaaretz: boolean = false): boolean => {\n    let jewishDate: BasicJewishDate;\n    if (isBasicJewishDate(date)) {\n        jewishDate = date;\n    } else {\n        jewishDate = toJewishDate(date);\n        \n    }\n    const yomTovList: Holiday[] = [...getYomTovListIsrael(), ...(isChutzLaaretz ? getYomTovListChutzLaaretzOnly() : [])]\n\n    return isHoliday(jewishDate, yomTovList)\n};"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACEA,yBAAmD;AAO5C,IAAM,YAAY,CAAC,YAA6B,gBAAoC;AAEvF,MAAI,CAAC,YAAY;AACb,UAAM,OAAO,oBAAI,KAAK;AACtB,qBAAa,iCAAa,IAAI;AAAA,EAClC;AACA,SAAO,YAAY,KAAK,OAAK,EAAE,OAAO,WAAW,OAAO,EAAE,aAAa,WAAW,SAAS;AAC/F;;;AChBA,IAAAA,sBAAiD;;;ACE1C,IAAM,oBAAoB,CAAC,WAA8D;AAC5F,SAAO,eAAe;AAC1B;;;ADoBO,IAAM,YAAY,CAAC,SAA0C;AAChE,MAAI;AACJ,MAAI,kBAAkB,IAAI,GAAG;AACzB,wBAAgB,qCAAgB,IAAI;AAAA,EACxC,OAAO;AACH,oBAAgB;AAAA,EACpB;AACA,SAAO,cAAc,OAAO,MAAM;AACtC;;;AE9BA,IAAAC,sBAA8C;AAK9C,IAAM,sBAAsB,MAAiB;AACzC,QAAM,SAAoB;AAAA,IACtB,EAAE,KAAK,GAAG,WAAW,UAAU,MAAM,gBAAgB;AAAA,IACrD,EAAE,KAAK,GAAG,WAAW,UAAU,MAAM,gBAAgB;AAAA,IACrD,EAAE,KAAK,IAAI,WAAW,UAAU,MAAM,aAAa;AAAA,IACnD,EAAE,KAAK,IAAI,WAAW,UAAU,MAAM,SAAS;AAAA,IAC/C,EAAE,KAAK,IAAI,WAAW,UAAU,MAAM,gBAAgB;AAAA,IAEtD,EAAE,KAAK,IAAI,WAAW,SAAS,MAAM,SAAS;AAAA,IAC9C,EAAE,KAAK,IAAI,WAAW,SAAS,MAAM,qBAAqB;AAAA,IAE1D,EAAE,KAAK,GAAG,WAAW,SAAS,MAAM,UAAU;AAAA,EAElD;AACA,SAAO;AACX;AAEA,IAAM,gCAAgC,MAAiB;AACnD,QAAM,SAAoB;AAAA,IACtB,EAAE,KAAK,IAAI,WAAW,UAAU,MAAM,SAAS;AAAA,IAC/C,EAAE,KAAK,IAAI,WAAW,UAAU,MAAM,gBAAgB;AAAA,IAEtD,EAAE,KAAK,IAAI,WAAW,SAAS,MAAM,SAAS;AAAA,IAC9C,EAAE,KAAK,IAAI,WAAW,SAAS,MAAM,qBAAqB;AAAA,IAE1D,EAAE,KAAK,GAAG,WAAW,SAAS,MAAM,UAAU;AAAA,EAClD;AACA,SAAO;AACX;AAuBO,IAAM,WAAW,CAAC,MAA8B,iBAA0B,UAAmB;AAChG,MAAI;AACJ,MAAI,kBAAkB,IAAI,GAAG;AACzB,iBAAa;AAAA,EACjB,OAAO;AACH,qBAAa,kCAAa,IAAI;AAAA,EAElC;AACA,QAAM,aAAwB,CAAC,GAAG,oBAAoB,GAAG,GAAI,iBAAiB,8BAA8B,IAAI,CAAC,CAAE;AAEnH,SAAO,UAAU,YAAY,UAAU;AAC3C;","names":["import_jewish_date","import_jewish_date"]}